# Generated by Django 2.1.4 on 2018-12-13 11:01

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('value', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)])),
                ('notes', models.CharField(blank=True, max_length=190, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['event', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('name', models.CharField(max_length=190)),
            ],
            options={
                'ordering': ('date',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=32, unique=True)),
                ('name', models.CharField(max_length=32)),
                ('full_name', models.CharField(max_length=160)),
                ('city', models.CharField(max_length=160)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('presentation', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('hashtag', models.CharField(blank=True, max_length=16, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_start_date', models.DateField()),
                ('registration_early_deadline', models.DateTimeField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField()),
                ('currency', models.CharField(choices=[('EUR', 'Euro')], default='EUR', max_length=3)),
                ('badge', models.TextField(blank=True, default='{}', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('authors', models.TextField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='papers', to='evan.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('type', models.CharField(choices=[('stripe_charge', 'Stripe charge'), ('stripe_refund', 'Stripe refund')], default='stripe_charge', max_length=32)),
                ('status', models.CharField(choices=[('succeeded', 'Succeeded'), ('pending', 'Pending'), ('failed', 'Failed')], default='failed', max_length=16)),
                ('outcome', models.TextField(blank=True, null=True)),
                ('stripe_id', models.CharField(blank=True, max_length=64, null=True)),
                ('stripe_response', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(choices=[(9, 'Owner'), (5, 'Administrator'), (1, 'Guest')], db_index=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perms', to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male')], db_index=True, max_length=1, null=True)),
                ('dietary', models.CharField(blank=True, choices=[('none', 'No special requirements'), ('vegetarian', 'Vegetarian'), ('vegan', 'Vegan'), ('kosher', 'Kosher'), ('muslim', 'Muslim'), ('int_gluten', 'Gluten intolerant'), ('int_lactose', 'Lactose intolerant'), ('al_peanuts', 'Allergic to crustaceans'), ('al_peanuts', 'Allergic to peanuts')], db_index=True, max_length=16, null=True)),
                ('affiliation', models.CharField(max_length=190)),
                ('country', django_countries.fields.CountryField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('fee', models.PositiveIntegerField(default=0)),
                ('saldo', models.IntegerField(default=0)),
                ('visa_requested', models.BooleanField()),
                ('visa_sent', models.BooleanField(default=False)),
                ('invoice_requested', models.BooleanField(default=False)),
                ('invoice_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coupon', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='evan.Coupon')),
                ('days', models.ManyToManyField(related_name='registrations', to='evan.Day')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='evan.Event')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='RegistrationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='evan.Registration')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190)),
                ('max_capacity', models.PositiveSmallIntegerField(default=0)),
                ('position', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_at', models.TimeField(blank=True, null=True)),
                ('end_at', models.TimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=190)),
                ('summary', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='public/sympo/activity')),
                ('max_attendees', models.PositiveSmallIntegerField(default=0, help_text='Leave on `0` for non limiting.')),
                ('extra_attendees_fee', models.PositiveSmallIntegerField(default=0)),
                ('is_private', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='evan.Event')),
                ('organizers', models.ManyToManyField(blank=True, related_name='organized_sessions', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='evan.Room')),
            ],
            options={
                'ordering': ['date', 'start_at', 'end_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='evan.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='evan.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=160)),
                ('city', models.CharField(blank=True, max_length=160, null=True)),
                ('presentation', models.TextField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=160, null=True)),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('lng', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('website', models.URLField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venues', to='evan.Event')),
            ],
        ),
        migrations.AddField(
            model_name='session',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='sessions', to='evan.Topic'),
        ),
        migrations.AddField(
            model_name='session',
            name='track',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='evan.Track'),
        ),
        migrations.AddField(
            model_name='room',
            name='venue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='evan.Venue'),
        ),
        migrations.AddField(
            model_name='registrationlog',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='evan.Session'),
        ),
        migrations.AddField(
            model_name='registration',
            name='sessions',
            field=models.ManyToManyField(related_name='registrations', to='evan.Session'),
        ),
        migrations.AddField(
            model_name='registration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='permission',
            name='user',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='perms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='evan.Registration'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['code'], name='evan_event_code_de03e5_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date', 'end_date'], name='evan_event_start_d_907dae_idx'),
        ),
        migrations.AddField(
            model_name='day',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='evan.Event'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='evan.Event'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['event', 'date'], name='evan_sessio_event_i_fa353e_idx'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['event', 'track'], name='evan_sessio_event_i_74abf3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='registrationlog',
            unique_together={('registration', 'session')},
        ),
        migrations.AddIndex(
            model_name='registration',
            index=models.Index(fields=['uuid'], name='evan_regist_uuid_df76cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='registration',
            unique_together={('event', 'user')},
        ),
        migrations.AddIndex(
            model_name='day',
            index=models.Index(fields=['event', 'date'], name='evan_day_confere_f267bf_idx'),
        ),
        migrations.AddIndex(
            model_name='coupon',
            index=models.Index(fields=['code'], name='evan_coupon_code_196326_idx'),
        ),
    ]
